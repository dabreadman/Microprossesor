


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             RESET, CODE, READONLY
    2 00000000         ;IMPORT main
    3 00000000         
    4 00000000         ; sample program makes the 4 LEDs P1.16, P1.17, P1.18, P
                       1.19 go on and off in sequence
    5 00000000         ; (c) Mike Brady, 2011 -- 2019.
    6 00000000         
    7 00000000         ;EXPORT start
    8 00000000         start
    9 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
   10 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   11 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   12 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010
   13 00000000         
   14 00000000         ; TODO
   15 00000000         ;  get decimal representation from hex
   16 00000000         ;   get binary representation using TABLE
   17 00000000         ;  calls flash subroutine
   18 00000000         
   19 00000000         ;;delay for about a half second
   20 00000000         ;ds ldr r4,=8000000
   21 00000000         ;dloop subs r4,r4,#1
   22 00000000         ;bne dloop
   23 00000000         
   24 00000000         
   25 00000000         
   26 00000000         l1
   27 00000000 EB000004        bl               button
   28 00000004 E3500000        cmp              r0,#0       ; if no input
   29 00000008 0AFFFFFC        beq              l1
   30 0000000C E1A05000        mov              r5,r0
   31 00000010 EAFFFFFA        b                l1
   32 00000014         
   33 00000014         ;ldr r4,#0 ; sum
   34 00000014         ;ldr r6,#0 ; check if input started
   35 00000014         ;ldr r7,#0 ; stored operand
   36 00000014         ;ldr r8,#0 ; operator
   37 00000014         
   38 00000014         ;sloop
   39 00000014         ;cmp r6,#1 ; if input ended
   40 00000014         ;beq endin
   41 00000014         ;loop 
   42 00000014         ;ldr r5,#0 ; current number
   43 00000014         ;bl button
   44 00000014         ;cmp r0,#19 ; if have input
   45 00000014         ;beq sloop 
   46 00000014         
   47 00000014         ;operands
   48 00000014         ;n+ 
   49 00000014         ;cmp r0,#23 ; if n+
   50 00000014         ;bne n-
   51 00000014         ;add r5,r5,#1 ; n++
   52 00000014         ;b timer
   53 00000014         
   54 00000014         ;n- 



ARM Macro Assembler    Page 2 


   55 00000014         ;cmp r0,#22 ; if n-
   56 00000014         ;bne operators
   57 00000014         ;b timer
   58 00000014         
   59 00000014         ;operators
   60 00000014         ;addi 
   61 00000014         ;cmp r0,#21 ; if +
   62 00000014         ;bne minus
   63 00000014         ;ldr r8,#1 ; set operator to +
   64 00000014         ;b loop
   65 00000014         ;minus 
   66 00000014         ;cmp r0,#20 ; if -
   67 00000014         ;bne clearc
   68 00000014         ;ldr r8,#2 ; set operator to -
   69 00000014         ;b timer
   70 00000014         ;clearc 
   71 00000014         ;cmp r0,#-20 ; if clear curr
   72 00000014         ;bne cleara
   73 00000014         ;b timer
   74 00000014         ;cleara 
   75 00000014         ;cmp r0,#-21 ; if clear all
   76 00000014         ;b timer
   77 00000014         
   78 00000014         ;timer
   79 00000014         ;ldr r1,=4000000 ; wait for 0.5 second for input
   80 00000014         ;tloop subs r1,r1,#1
   81 00000014         ;bne tloop
   82 00000014         ;b loop
   83 00000014         
   84 00000014         ;endin 
   85 00000014         ;ldr r6,#0 ; end input
   86 00000014         ;cmp r8,#0 ; if operator
   87 00000014         ;beq setop
   88 00000014         ;cmp r8,#1 ; if +
   89 00000014         ;bne min
   90 00000014         ;add r4,r5,r4 ; sum+= operand
   91 00000014         ;ldr r8,#0 ; reset operator
   92 00000014         ;b loop
   93 00000014         ;min cmp r8,#2 ; if -
   94 00000014         ;bne loop
   95 00000014         ;sub r4,r4,r5 ; sum-= operand
   96 00000014         ;ldr r8,#0 ; reset operator
   97 00000014         ;b loop
   98 00000014         
   99 00000014         ;setop 
  100 00000014         ;mov r4, r5 ; move operand
  101 00000014         ;b loop
  102 00000014         
  103 00000014 EAFFFFFE 
                       stop    B                stop
  104 00000018         
  105 00000018         ;   button subroutine
  106 00000018         ; Reads the memory and determine the input
  107 00000018         ; Returns the input index
  108 00000018         ; parameter:
  109 00000018         ; none
  110 00000018         ; returns
  111 00000018         ;  R0: Index
  112 00000018         



ARM Macro Assembler    Page 3 


  113 00000018         button
  114 00000018 E92D4030        PUSH             {r4-r5,LR}
  115 0000001C E3A05000        ldr              r5,=0       ; not pressed
  116 00000020 E59F0074 
                       extract ldr              r0,=IO1PIN  ; loads memory
  117 00000024 E5900000        ldr              r0,[r0]
  118 00000028 E1A00A20        lsr              r0,#20      ; shift to right lo
                                                            cation
  119 0000002C E3A0100F        ldr              r1,=0xf
  120 00000030 E0000001        and              r0,r0,r1    ; clear other bits
  121 00000034 E3500000        cmp              r0,#0       ; if has input
  122 00000038 0A000000        beq              fin
  123 0000003C         ;cmp r5,#0 ; if not sure long press
  124 0000003C         ;bgt long
  125 0000003C E1A03000        mov              r3, r0      ; store a copy
  126 00000040         
  127 00000040         ;delay for a quarter second
  128 00000040         ;ds ldr r4,=2000000
  129 00000040         ;dloop subs r4,r4,#1
  130 00000040         ;bne dloop
  131 00000040         ;b extract
  132 00000040         
  133 00000040         ;long cmp r0,r3 ; if same(holding)
  134 00000040         ;bne finRE
  135 00000040         ;cmp r5,#8 ; if
  136 00000040         ;bge finLong
  137 00000040         ;add r5,r5,#1 ; increment counter
  138 00000040         ;b ds
  139 00000040         
  140 00000040         
  141 00000040         ;finRE mov r0,r3 ; revert input 
  142 00000040         ;b fin
  143 00000040         
  144 00000040         ;finLong mvn r0,r0 ; invert
  145 00000040         ;add r0,r0,#1 ; +1
  146 00000040         fin
  147 00000040 E1E00000        mvn              r0,r0
  148 00000044 E8BD8030        POP              {r4,r5,PC}
  149 00000048         
  150 00000048         
  151 00000048         ;
  152 00000048         ; flash subroutine
  153 00000048         ; Show the binary representation with LED flashing 
  154 00000048         ; parameter: 
  155 00000048         ;  R0: binary representation
  156 00000048         ; output:
  157 00000048         ;  none
  158 00000048         
  159 00000048 E92D4038 
                       flash   PUSH             {r3-r5,lr}
  160 0000004C E59F104C        ldr              r1,=IO1DIR
  161 00000050 E3A0280F        ldr              r2,=0x000f0000 ;select P1.19--P
                                                            1.16
  162 00000054 E5812000        str              r2,[r1]     ;make them outputs
  163 00000058 E59F1044        ldr              r1,=IO1SET
  164 0000005C E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
  165 00000060 E59F2040        ldr              r2,=IO1CLR
  166 00000064         



ARM Macro Assembler    Page 4 


  167 00000064         ; r1 points to the SET register
  168 00000064         ; r2 points to the CLEAR register
  169 00000064         
  170 00000064 E3A05702        ldr              r5,=0x000080000 ; end when the 
                                                            mask reaches this v
                                                            alue
  171 00000068 E3A03702 
                       fs      ldr              r3,=0x000080000 
                                                            ; start with P1.16.
                                                            
  172 0000006C         floop
  173 0000006C E3A04000        ldr              r4,=0       ; check if bit set
  174 00000070 E3500000        cmp              r0,#0
  175 00000074 0A000006        beq              ledE
  176 00000078 E1B000A0        movs             r0,r0,lsr #1 ; check if bit set
                                                            
  177 0000007C E2A44000        adc              r4,r4,#0
  178 00000080 E3540000        cmp              r4,#0       ; if set
  179 00000084 0AFFFFF8        beq              floop
  180 00000088 E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED
  181 0000008C E1A030A3        mov              r3,r3,lsr #1 ; next bit
  182 00000090 EAFFFFF5        b                floop
  183 00000094         
  184 00000094         
  185 00000094         ledE
  186 00000094 E8BD8038        POP              {r3-r5,pc}
  187 00000098         
  188 00000098 00000419 
                       NUMBER  DCD              0x00000419
  189 0000009C         
  190 0000009C                 END
              E0028010 
              E0028018 
              E0028014 
              E002801C 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

NUMBER 00000098

Symbol: NUMBER
   Definitions
      At line 188 in file App.s
   Uses
      None
Comment: NUMBER unused
RESET 00000000

Symbol: RESET
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: RESET unused
button 00000018

Symbol: button
   Definitions
      At line 113 in file App.s
   Uses
      At line 27 in file App.s
Comment: button used once
extract 00000020

Symbol: extract
   Definitions
      At line 116 in file App.s
   Uses
      None
Comment: extract unused
fin 00000040

Symbol: fin
   Definitions
      At line 146 in file App.s
   Uses
      At line 122 in file App.s
Comment: fin used once
flash 00000048

Symbol: flash
   Definitions
      At line 159 in file App.s
   Uses
      None
Comment: flash unused
floop 0000006C

Symbol: floop
   Definitions
      At line 172 in file App.s
   Uses
      At line 179 in file App.s
      At line 182 in file App.s

fs 00000068




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: fs
   Definitions
      At line 171 in file App.s
   Uses
      None
Comment: fs unused
l1 00000000

Symbol: l1
   Definitions
      At line 26 in file App.s
   Uses
      At line 29 in file App.s
      At line 31 in file App.s

ledE 00000094

Symbol: ledE
   Definitions
      At line 185 in file App.s
   Uses
      At line 175 in file App.s
Comment: ledE used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file App.s
   Uses
      None
Comment: start unused
stop 00000014

Symbol: stop
   Definitions
      At line 103 in file App.s
   Uses
      At line 103 in file App.s
Comment: stop used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 11 in file App.s
   Uses
      At line 165 in file App.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 9 in file App.s
   Uses
      At line 160 in file App.s
Comment: IO1DIR used once
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 12 in file App.s
   Uses
      At line 116 in file App.s
Comment: IO1PIN used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 10 in file App.s
   Uses
      At line 163 in file App.s
Comment: IO1SET used once
4 symbols
351 symbols in table
